=begin
#MINDBODY Public API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v6

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.6

=end

require 'uri'

module SwaggerClient
  class ClassApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Book a client into a class.
    # This endpoint adds a client to a class or to a class waiting list. It is helpful to use this endpoint in the following situations:  * Use after calling `GET Clients` and `GET Classes` so that you are sure which client to book in which class.  * If adding a client to a class from a waiting list, use this call after you call `GET WaitlistEntries` and determine the ID of the waiting list from which you are moving the client.  * If adding a client to a class and using a pricing option that the client has already purchased, use this call after you call `GET ClientServices` to determine the ID of the pricing option that the client wants to use.    If you add a client to a class and the client purchases a new pricing option, use `GET Services`, `GET Classes`, and then `POST CheckoutShoppingCart` in place of this call.    This endpoint also supports cross-regional class bookings. If you want to perform a cross-regional class booking, set `CrossRegionalBooking` to `true`. This endpoint does not support adding a user to a waiting list using a cross-regional client pricing option(service). Cross-regional booking workflows do not support client service scheduling restrictions.    When performing a cross-regional class booking, this endpoint loops through the first ten sites that the client is associated with, looks for client pricing options at each of those sites, and then uses the oldest client pricing option found.It is important to note that this endpoint only loops through a maximum of ten associated client sites. If a `ClientID` is associated with more than ten sites in an organization, this endpoint only loops through the first ten.If you know that a client has a client service at another site, you can specify that site using the `CrossRegionalBookingClientServiceSiteId` query parameter.    If you perform a cross-regional booking, two additional fields are included in the `SessionType` object of the response:  * `SiteID`, which specifies where the client service is coming from  * `CrossRegionalBookingPerformed`, a Boolean field that is set to `true`    As a prerequisite to using this endpoint, your `SourceName` must have been granted access to the organization to which the site belongs.
    # @param request 
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token. (default to )
    # @return [AddClientToClassResponse]
    def class_add_client_to_class(request, site_id, version, opts = {})
      data, _status_code, _headers = class_add_client_to_class_with_http_info(request, site_id, version, opts)
      data
    end

    # Book a client into a class.
    # This endpoint adds a client to a class or to a class waiting list. It is helpful to use this endpoint in the following situations:  * Use after calling &#x60;GET Clients&#x60; and &#x60;GET Classes&#x60; so that you are sure which client to book in which class.  * If adding a client to a class from a waiting list, use this call after you call &#x60;GET WaitlistEntries&#x60; and determine the ID of the waiting list from which you are moving the client.  * If adding a client to a class and using a pricing option that the client has already purchased, use this call after you call &#x60;GET ClientServices&#x60; to determine the ID of the pricing option that the client wants to use.    If you add a client to a class and the client purchases a new pricing option, use &#x60;GET Services&#x60;, &#x60;GET Classes&#x60;, and then &#x60;POST CheckoutShoppingCart&#x60; in place of this call.    This endpoint also supports cross-regional class bookings. If you want to perform a cross-regional class booking, set &#x60;CrossRegionalBooking&#x60; to &#x60;true&#x60;. This endpoint does not support adding a user to a waiting list using a cross-regional client pricing option(service). Cross-regional booking workflows do not support client service scheduling restrictions.    When performing a cross-regional class booking, this endpoint loops through the first ten sites that the client is associated with, looks for client pricing options at each of those sites, and then uses the oldest client pricing option found.It is important to note that this endpoint only loops through a maximum of ten associated client sites. If a &#x60;ClientID&#x60; is associated with more than ten sites in an organization, this endpoint only loops through the first ten.If you know that a client has a client service at another site, you can specify that site using the &#x60;CrossRegionalBookingClientServiceSiteId&#x60; query parameter.    If you perform a cross-regional booking, two additional fields are included in the &#x60;SessionType&#x60; object of the response:  * &#x60;SiteID&#x60;, which specifies where the client service is coming from  * &#x60;CrossRegionalBookingPerformed&#x60;, a Boolean field that is set to &#x60;true&#x60;    As a prerequisite to using this endpoint, your &#x60;SourceName&#x60; must have been granted access to the organization to which the site belongs.
    # @param request 
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token.
    # @return [Array<(AddClientToClassResponse, Fixnum, Hash)>] AddClientToClassResponse data, response status code and response headers
    def class_add_client_to_class_with_http_info(request, site_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClassApi.class_add_client_to_class ...'
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling ClassApi.class_add_client_to_class"
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ClassApi.class_add_client_to_class"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClassApi.class_add_client_to_class"
      end
      # resource path
      local_var_path = '/public/v{version}/class/addclienttoclass'.sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      header_params[:'siteId'] = site_id
      header_params[:'authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AddClientToClassResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClassApi#class_add_client_to_class\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get class descriptions.
    # To find class descriptions associated with **scheduled classes**, pass `StaffId`, `StartClassDateTime`, `EndClassDateTime`, or `LocationId` in the request.
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token. (default to )
    # @option opts [Integer] :request_class_description_id Filters to the single result with the given ID.
    # @option opts [DateTime] :request_end_class_date_time Filters the results to class descriptions for scheduled classes that happen before the given date and time.
    # @option opts [Integer] :request_limit Number of results to include, defaults to 100
    # @option opts [Integer] :request_location_id Filters results to classes descriptions for schedule classes as the given location.
    # @option opts [Integer] :request_offset Page offset, defaults to 0.
    # @option opts [Array<Integer>] :request_program_ids Filters results to class descriptions belonging to the given programs.
    # @option opts [Integer] :request_staff_id Filters results to class descriptions for scheduled classes taught by the given staff member.
    # @option opts [DateTime] :request_start_class_date_time Filters the results to class descriptions for scheduled classes that happen on or after the given date and time.
    # @return [GetClassDescriptionsResponse]
    def class_get_class_descriptions(site_id, version, opts = {})
      data, _status_code, _headers = class_get_class_descriptions_with_http_info(site_id, version, opts)
      data
    end

    # Get class descriptions.
    # To find class descriptions associated with **scheduled classes**, pass &#x60;StaffId&#x60;, &#x60;StartClassDateTime&#x60;, &#x60;EndClassDateTime&#x60;, or &#x60;LocationId&#x60; in the request.
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token.
    # @option opts [Integer] :request_class_description_id Filters to the single result with the given ID.
    # @option opts [DateTime] :request_end_class_date_time Filters the results to class descriptions for scheduled classes that happen before the given date and time.
    # @option opts [Integer] :request_limit Number of results to include, defaults to 100
    # @option opts [Integer] :request_location_id Filters results to classes descriptions for schedule classes as the given location.
    # @option opts [Integer] :request_offset Page offset, defaults to 0.
    # @option opts [Array<Integer>] :request_program_ids Filters results to class descriptions belonging to the given programs.
    # @option opts [Integer] :request_staff_id Filters results to class descriptions for scheduled classes taught by the given staff member.
    # @option opts [DateTime] :request_start_class_date_time Filters the results to class descriptions for scheduled classes that happen on or after the given date and time.
    # @return [Array<(GetClassDescriptionsResponse, Fixnum, Hash)>] GetClassDescriptionsResponse data, response status code and response headers
    def class_get_class_descriptions_with_http_info(site_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClassApi.class_get_class_descriptions ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ClassApi.class_get_class_descriptions"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClassApi.class_get_class_descriptions"
      end
      # resource path
      local_var_path = '/public/v{version}/class/classdescriptions'.sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}
      query_params[:'request.classDescriptionId'] = opts[:'request_class_description_id'] if !opts[:'request_class_description_id'].nil?
      query_params[:'request.endClassDateTime'] = opts[:'request_end_class_date_time'] if !opts[:'request_end_class_date_time'].nil?
      query_params[:'request.limit'] = opts[:'request_limit'] if !opts[:'request_limit'].nil?
      query_params[:'request.locationId'] = opts[:'request_location_id'] if !opts[:'request_location_id'].nil?
      query_params[:'request.offset'] = opts[:'request_offset'] if !opts[:'request_offset'].nil?
      query_params[:'request.programIds'] = @api_client.build_collection_param(opts[:'request_program_ids'], :multi) if !opts[:'request_program_ids'].nil?
      query_params[:'request.staffId'] = opts[:'request_staff_id'] if !opts[:'request_staff_id'].nil?
      query_params[:'request.startClassDateTime'] = opts[:'request_start_class_date_time'] if !opts[:'request_start_class_date_time'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'siteId'] = site_id
      header_params[:'authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetClassDescriptionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClassApi#class_get_class_descriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get class schedules.
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token. (default to )
    # @option opts [Array<Integer>] :request_class_schedule_ids The class schedule IDs.  &lt;br /&gt;Default: **all**
    # @option opts [DateTime] :request_end_date The end date of the range. Return any active enrollments that occur on or before this day.  &lt;br /&gt;Default: **StartDate**
    # @option opts [Integer] :request_limit Number of results to include, defaults to 100
    # @option opts [Array<Integer>] :request_location_ids The location IDs.   &lt;br /&gt;Default: **all**
    # @option opts [Integer] :request_offset Page offset, defaults to 0.
    # @option opts [Array<Integer>] :request_program_ids The program IDs.   &lt;br /&gt;Default: **all**
    # @option opts [Array<Integer>] :request_session_type_ids The session type IDs.   &lt;br /&gt;Default: **all**
    # @option opts [Array<Integer>] :request_staff_ids The staff IDs.   &lt;br /&gt;Default: **all**
    # @option opts [DateTime] :request_start_date The start date of the range. Return any active enrollments that occur on or after this day.  &lt;br /&gt;Default: **today’s date**
    # @return [GetClassSchedulesResponse]
    def class_get_class_schedules(site_id, version, opts = {})
      data, _status_code, _headers = class_get_class_schedules_with_http_info(site_id, version, opts)
      data
    end

    # Get class schedules.
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token.
    # @option opts [Array<Integer>] :request_class_schedule_ids The class schedule IDs.  &lt;br /&gt;Default: **all**
    # @option opts [DateTime] :request_end_date The end date of the range. Return any active enrollments that occur on or before this day.  &lt;br /&gt;Default: **StartDate**
    # @option opts [Integer] :request_limit Number of results to include, defaults to 100
    # @option opts [Array<Integer>] :request_location_ids The location IDs.   &lt;br /&gt;Default: **all**
    # @option opts [Integer] :request_offset Page offset, defaults to 0.
    # @option opts [Array<Integer>] :request_program_ids The program IDs.   &lt;br /&gt;Default: **all**
    # @option opts [Array<Integer>] :request_session_type_ids The session type IDs.   &lt;br /&gt;Default: **all**
    # @option opts [Array<Integer>] :request_staff_ids The staff IDs.   &lt;br /&gt;Default: **all**
    # @option opts [DateTime] :request_start_date The start date of the range. Return any active enrollments that occur on or after this day.  &lt;br /&gt;Default: **today’s date**
    # @return [Array<(GetClassSchedulesResponse, Fixnum, Hash)>] GetClassSchedulesResponse data, response status code and response headers
    def class_get_class_schedules_with_http_info(site_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClassApi.class_get_class_schedules ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ClassApi.class_get_class_schedules"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClassApi.class_get_class_schedules"
      end
      # resource path
      local_var_path = '/public/v{version}/class/classschedules'.sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}
      query_params[:'request.classScheduleIds'] = @api_client.build_collection_param(opts[:'request_class_schedule_ids'], :multi) if !opts[:'request_class_schedule_ids'].nil?
      query_params[:'request.endDate'] = opts[:'request_end_date'] if !opts[:'request_end_date'].nil?
      query_params[:'request.limit'] = opts[:'request_limit'] if !opts[:'request_limit'].nil?
      query_params[:'request.locationIds'] = @api_client.build_collection_param(opts[:'request_location_ids'], :multi) if !opts[:'request_location_ids'].nil?
      query_params[:'request.offset'] = opts[:'request_offset'] if !opts[:'request_offset'].nil?
      query_params[:'request.programIds'] = @api_client.build_collection_param(opts[:'request_program_ids'], :multi) if !opts[:'request_program_ids'].nil?
      query_params[:'request.sessionTypeIds'] = @api_client.build_collection_param(opts[:'request_session_type_ids'], :multi) if !opts[:'request_session_type_ids'].nil?
      query_params[:'request.staffIds'] = @api_client.build_collection_param(opts[:'request_staff_ids'], :multi) if !opts[:'request_staff_ids'].nil?
      query_params[:'request.startDate'] = opts[:'request_start_date'] if !opts[:'request_start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'siteId'] = site_id
      header_params[:'authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetClassSchedulesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClassApi#class_get_class_schedules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information about clients booked in a class.
    # Returns a list of visits that contain information for a specified class. On success, this request returns the class object in the response with a list of visits.
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token. (default to )
    # @option opts [Integer] :request_class_id The class ID.
    # @option opts [DateTime] :request_last_modified_date When included in the request, only records modified on or after the &#x60;LastModifiedDate&#x60; specified are included in the response.
    # @return [GetClassVisitsResponse]
    def class_get_class_visits(site_id, version, opts = {})
      data, _status_code, _headers = class_get_class_visits_with_http_info(site_id, version, opts)
      data
    end

    # Get information about clients booked in a class.
    # Returns a list of visits that contain information for a specified class. On success, this request returns the class object in the response with a list of visits.
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token.
    # @option opts [Integer] :request_class_id The class ID.
    # @option opts [DateTime] :request_last_modified_date When included in the request, only records modified on or after the &#x60;LastModifiedDate&#x60; specified are included in the response.
    # @return [Array<(GetClassVisitsResponse, Fixnum, Hash)>] GetClassVisitsResponse data, response status code and response headers
    def class_get_class_visits_with_http_info(site_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClassApi.class_get_class_visits ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ClassApi.class_get_class_visits"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClassApi.class_get_class_visits"
      end
      # resource path
      local_var_path = '/public/v{version}/class/classvisits'.sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}
      query_params[:'request.classID'] = opts[:'request_class_id'] if !opts[:'request_class_id'].nil?
      query_params[:'request.lastModifiedDate'] = opts[:'request_last_modified_date'] if !opts[:'request_last_modified_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'siteId'] = site_id
      header_params[:'authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetClassVisitsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClassApi#class_get_class_visits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get scheduled classes.
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token. (default to )
    # @option opts [Array<Integer>] :request_class_description_ids The requested class description IDs.
    # @option opts [Array<Integer>] :request_class_ids The requested class IDs.
    # @option opts [String] :request_client_id The client ID of the client who is viewing this class list. Based on identity, the client may be able to see additional information, such as membership specials.
    # @option opts [DateTime] :request_end_date_time The requested end date for filtering.  &lt;br /&gt;Default: **today’s date**
    # @option opts [BOOLEAN] :request_hide_canceled_classes When &#x60;true&#x60;, canceled classes are removed from the response.&lt;br /&gt;  When &#x60;false&#x60;, canceled classes are included in the response.&lt;br /&gt;  Default: **false**
    # @option opts [DateTime] :request_last_modified_date When included in the request, only records modified on or after the &#x60;LastModifiedDate&#x60; specified are included in the response.
    # @option opts [Integer] :request_limit Number of results to include, defaults to 100
    # @option opts [Array<Integer>] :request_location_ids A list of location IDs on which to base the search.
    # @option opts [Integer] :request_offset Page offset, defaults to 0.
    # @option opts [Array<Integer>] :request_program_ids A list of program IDs on which to base the search.
    # @option opts [BOOLEAN] :request_scheduling_window When &#x60;true&#x60;, classes outside scheduling window are removed from the response.&lt;br /&gt;  When &#x60;false&#x60;, classes are included in the response, regardless of the scheduling window.&lt;br /&gt;  Default: **false**
    # @option opts [Array<Integer>] :request_semester_ids A list of semester IDs on which to base the search.
    # @option opts [Array<Integer>] :request_session_type_ids A list of session type IDs on which to base the search.
    # @option opts [Array<Integer>] :request_staff_ids The requested IDs of the teaching staff members.
    # @option opts [DateTime] :request_start_date_time The requested start date for filtering.   &lt;br /&gt;Default: **today’s date**
    # @return [GetClassesResponse]
    def class_get_classes(site_id, version, opts = {})
      data, _status_code, _headers = class_get_classes_with_http_info(site_id, version, opts)
      data
    end

    # Get scheduled classes.
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token.
    # @option opts [Array<Integer>] :request_class_description_ids The requested class description IDs.
    # @option opts [Array<Integer>] :request_class_ids The requested class IDs.
    # @option opts [String] :request_client_id The client ID of the client who is viewing this class list. Based on identity, the client may be able to see additional information, such as membership specials.
    # @option opts [DateTime] :request_end_date_time The requested end date for filtering.  &lt;br /&gt;Default: **today’s date**
    # @option opts [BOOLEAN] :request_hide_canceled_classes When &#x60;true&#x60;, canceled classes are removed from the response.&lt;br /&gt;  When &#x60;false&#x60;, canceled classes are included in the response.&lt;br /&gt;  Default: **false**
    # @option opts [DateTime] :request_last_modified_date When included in the request, only records modified on or after the &#x60;LastModifiedDate&#x60; specified are included in the response.
    # @option opts [Integer] :request_limit Number of results to include, defaults to 100
    # @option opts [Array<Integer>] :request_location_ids A list of location IDs on which to base the search.
    # @option opts [Integer] :request_offset Page offset, defaults to 0.
    # @option opts [Array<Integer>] :request_program_ids A list of program IDs on which to base the search.
    # @option opts [BOOLEAN] :request_scheduling_window When &#x60;true&#x60;, classes outside scheduling window are removed from the response.&lt;br /&gt;  When &#x60;false&#x60;, classes are included in the response, regardless of the scheduling window.&lt;br /&gt;  Default: **false**
    # @option opts [Array<Integer>] :request_semester_ids A list of semester IDs on which to base the search.
    # @option opts [Array<Integer>] :request_session_type_ids A list of session type IDs on which to base the search.
    # @option opts [Array<Integer>] :request_staff_ids The requested IDs of the teaching staff members.
    # @option opts [DateTime] :request_start_date_time The requested start date for filtering.   &lt;br /&gt;Default: **today’s date**
    # @return [Array<(GetClassesResponse, Fixnum, Hash)>] GetClassesResponse data, response status code and response headers
    def class_get_classes_with_http_info(site_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClassApi.class_get_classes ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ClassApi.class_get_classes"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClassApi.class_get_classes"
      end
      # resource path
      local_var_path = '/public/v{version}/class/classes'.sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}
      query_params[:'request.classDescriptionIds'] = @api_client.build_collection_param(opts[:'request_class_description_ids'], :multi) if !opts[:'request_class_description_ids'].nil?
      query_params[:'request.classIds'] = @api_client.build_collection_param(opts[:'request_class_ids'], :multi) if !opts[:'request_class_ids'].nil?
      query_params[:'request.clientId'] = opts[:'request_client_id'] if !opts[:'request_client_id'].nil?
      query_params[:'request.endDateTime'] = opts[:'request_end_date_time'] if !opts[:'request_end_date_time'].nil?
      query_params[:'request.hideCanceledClasses'] = opts[:'request_hide_canceled_classes'] if !opts[:'request_hide_canceled_classes'].nil?
      query_params[:'request.lastModifiedDate'] = opts[:'request_last_modified_date'] if !opts[:'request_last_modified_date'].nil?
      query_params[:'request.limit'] = opts[:'request_limit'] if !opts[:'request_limit'].nil?
      query_params[:'request.locationIds'] = @api_client.build_collection_param(opts[:'request_location_ids'], :multi) if !opts[:'request_location_ids'].nil?
      query_params[:'request.offset'] = opts[:'request_offset'] if !opts[:'request_offset'].nil?
      query_params[:'request.programIds'] = @api_client.build_collection_param(opts[:'request_program_ids'], :multi) if !opts[:'request_program_ids'].nil?
      query_params[:'request.schedulingWindow'] = opts[:'request_scheduling_window'] if !opts[:'request_scheduling_window'].nil?
      query_params[:'request.semesterIds'] = @api_client.build_collection_param(opts[:'request_semester_ids'], :multi) if !opts[:'request_semester_ids'].nil?
      query_params[:'request.sessionTypeIds'] = @api_client.build_collection_param(opts[:'request_session_type_ids'], :multi) if !opts[:'request_session_type_ids'].nil?
      query_params[:'request.staffIds'] = @api_client.build_collection_param(opts[:'request_staff_ids'], :multi) if !opts[:'request_staff_ids'].nil?
      query_params[:'request.startDateTime'] = opts[:'request_start_date_time'] if !opts[:'request_start_date_time'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'siteId'] = site_id
      header_params[:'authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetClassesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClassApi#class_get_classes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get waiting list entries.
    # Returns a list of waiting list entries for a specified class schedule or class. The request requires staff credentials and either a class schedule ID or class ID.
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token. (default to )
    # @option opts [Array<Integer>] :request_class_ids The requested class IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request. &lt;br /&gt;  Either &#x60;ClassScheduleIds&#x60;, &#x60;ClientIds&#x60;, &#x60;WaitlistEntryIds&#x60;, or &#x60;ClassIds&#x60; is required; the others become optional.&lt;br /&gt;  Default: **all ClassIds**
    # @option opts [Array<Integer>] :request_class_schedule_ids The requested class schedule IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request.&lt;br /&gt;  Either &#x60;ClassScheduleIds&#x60;, &#x60;ClientIds&#x60;, &#x60;WaitlistEntryIds&#x60;, or &#x60;ClassIds&#x60; is required; the others become optional.&lt;br /&gt;  Default: **all ClassScheduleIds**
    # @option opts [Array<String>] :request_client_ids The requested client IDs.&lt;br /&gt;  Either &#x60;ClassScheduleIds&#x60;, &#x60;ClientIds&#x60;, &#x60;WaitlistEntryIds&#x60;, or &#x60;ClassIds&#x60; is required; the others become optional.&lt;br /&gt;  Default: **all ClientIds**
    # @option opts [BOOLEAN] :request_hide_past_entries When &#x60;true&#x60;, indicates that past waiting list entries are hidden from clients.&lt;br /&gt;  When &#x60;false&#x60;, indicates that past entries are not hidden from clients.&lt;br /&gt;  Default: **false**
    # @option opts [Integer] :request_limit Number of results to include, defaults to 100
    # @option opts [Integer] :request_offset Page offset, defaults to 0.
    # @option opts [Array<Integer>] :request_waitlist_entry_ids The requested waiting list entry IDs.&lt;br /&gt;  Either &#x60;ClassScheduleIds&#x60;, &#x60;ClientIds&#x60;, &#x60;WaitlistEntryIds&#x60;, or &#x60;ClassIds&#x60; is required; the others become optional.&lt;br /&gt;  Default: **all WaitlistEntryIds**
    # @return [GetWaitlistEntriesResponse]
    def class_get_waitlist_entries(site_id, version, opts = {})
      data, _status_code, _headers = class_get_waitlist_entries_with_http_info(site_id, version, opts)
      data
    end

    # Get waiting list entries.
    # Returns a list of waiting list entries for a specified class schedule or class. The request requires staff credentials and either a class schedule ID or class ID.
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token.
    # @option opts [Array<Integer>] :request_class_ids The requested class IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request. &lt;br /&gt;  Either &#x60;ClassScheduleIds&#x60;, &#x60;ClientIds&#x60;, &#x60;WaitlistEntryIds&#x60;, or &#x60;ClassIds&#x60; is required; the others become optional.&lt;br /&gt;  Default: **all ClassIds**
    # @option opts [Array<Integer>] :request_class_schedule_ids The requested class schedule IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request.&lt;br /&gt;  Either &#x60;ClassScheduleIds&#x60;, &#x60;ClientIds&#x60;, &#x60;WaitlistEntryIds&#x60;, or &#x60;ClassIds&#x60; is required; the others become optional.&lt;br /&gt;  Default: **all ClassScheduleIds**
    # @option opts [Array<String>] :request_client_ids The requested client IDs.&lt;br /&gt;  Either &#x60;ClassScheduleIds&#x60;, &#x60;ClientIds&#x60;, &#x60;WaitlistEntryIds&#x60;, or &#x60;ClassIds&#x60; is required; the others become optional.&lt;br /&gt;  Default: **all ClientIds**
    # @option opts [BOOLEAN] :request_hide_past_entries When &#x60;true&#x60;, indicates that past waiting list entries are hidden from clients.&lt;br /&gt;  When &#x60;false&#x60;, indicates that past entries are not hidden from clients.&lt;br /&gt;  Default: **false**
    # @option opts [Integer] :request_limit Number of results to include, defaults to 100
    # @option opts [Integer] :request_offset Page offset, defaults to 0.
    # @option opts [Array<Integer>] :request_waitlist_entry_ids The requested waiting list entry IDs.&lt;br /&gt;  Either &#x60;ClassScheduleIds&#x60;, &#x60;ClientIds&#x60;, &#x60;WaitlistEntryIds&#x60;, or &#x60;ClassIds&#x60; is required; the others become optional.&lt;br /&gt;  Default: **all WaitlistEntryIds**
    # @return [Array<(GetWaitlistEntriesResponse, Fixnum, Hash)>] GetWaitlistEntriesResponse data, response status code and response headers
    def class_get_waitlist_entries_with_http_info(site_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClassApi.class_get_waitlist_entries ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ClassApi.class_get_waitlist_entries"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClassApi.class_get_waitlist_entries"
      end
      # resource path
      local_var_path = '/public/v{version}/class/waitlistentries'.sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}
      query_params[:'request.classIds'] = @api_client.build_collection_param(opts[:'request_class_ids'], :multi) if !opts[:'request_class_ids'].nil?
      query_params[:'request.classScheduleIds'] = @api_client.build_collection_param(opts[:'request_class_schedule_ids'], :multi) if !opts[:'request_class_schedule_ids'].nil?
      query_params[:'request.clientIds'] = @api_client.build_collection_param(opts[:'request_client_ids'], :multi) if !opts[:'request_client_ids'].nil?
      query_params[:'request.hidePastEntries'] = opts[:'request_hide_past_entries'] if !opts[:'request_hide_past_entries'].nil?
      query_params[:'request.limit'] = opts[:'request_limit'] if !opts[:'request_limit'].nil?
      query_params[:'request.offset'] = opts[:'request_offset'] if !opts[:'request_offset'].nil?
      query_params[:'request.waitlistEntryIds'] = @api_client.build_collection_param(opts[:'request_waitlist_entry_ids'], :multi) if !opts[:'request_waitlist_entry_ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'siteId'] = site_id
      header_params[:'authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetWaitlistEntriesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClassApi#class_get_waitlist_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove a client from a class.
    # @param request 
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token. (default to )
    # @return [RemoveClientFromClassResponse]
    def class_remove_client_from_class(request, site_id, version, opts = {})
      data, _status_code, _headers = class_remove_client_from_class_with_http_info(request, site_id, version, opts)
      data
    end

    # Remove a client from a class.
    # @param request 
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token.
    # @return [Array<(RemoveClientFromClassResponse, Fixnum, Hash)>] RemoveClientFromClassResponse data, response status code and response headers
    def class_remove_client_from_class_with_http_info(request, site_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClassApi.class_remove_client_from_class ...'
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling ClassApi.class_remove_client_from_class"
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ClassApi.class_remove_client_from_class"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClassApi.class_remove_client_from_class"
      end
      # resource path
      local_var_path = '/public/v{version}/class/removeclientfromclass'.sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      header_params[:'siteId'] = site_id
      header_params[:'authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RemoveClientFromClassResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClassApi#class_remove_client_from_class\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove a client from a waiting list.
    # This endpoint does not return a response. If a call to this endpoint results in a 200 OK HTTP status code, then the call was successful.
    # @param request_waitlist_entry_ids A list of waiting list IDs to remove from waiting lists.
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token. (default to )
    # @return [RemoveFromWaitlistResponse]
    def class_remove_from_waitlist(request_waitlist_entry_ids, site_id, version, opts = {})
      data, _status_code, _headers = class_remove_from_waitlist_with_http_info(request_waitlist_entry_ids, site_id, version, opts)
      data
    end

    # Remove a client from a waiting list.
    # This endpoint does not return a response. If a call to this endpoint results in a 200 OK HTTP status code, then the call was successful.
    # @param request_waitlist_entry_ids A list of waiting list IDs to remove from waiting lists.
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token.
    # @return [Array<(RemoveFromWaitlistResponse, Fixnum, Hash)>] RemoveFromWaitlistResponse data, response status code and response headers
    def class_remove_from_waitlist_with_http_info(request_waitlist_entry_ids, site_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClassApi.class_remove_from_waitlist ...'
      end
      # verify the required parameter 'request_waitlist_entry_ids' is set
      if @api_client.config.client_side_validation && request_waitlist_entry_ids.nil?
        fail ArgumentError, "Missing the required parameter 'request_waitlist_entry_ids' when calling ClassApi.class_remove_from_waitlist"
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ClassApi.class_remove_from_waitlist"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClassApi.class_remove_from_waitlist"
      end
      # resource path
      local_var_path = '/public/v{version}/class/removefromwaitlist'.sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}
      query_params[:'request.waitlistEntryIds'] = @api_client.build_collection_param(request_waitlist_entry_ids, :multi)

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'siteId'] = site_id
      header_params[:'authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RemoveFromWaitlistResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClassApi#class_remove_from_waitlist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Substitute a class teacher.
    # @param request 
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token. (default to )
    # @return [SubstituteClassTeacherResponse]
    def class_substitute_class_teacher(request, site_id, version, opts = {})
      data, _status_code, _headers = class_substitute_class_teacher_with_http_info(request, site_id, version, opts)
      data
    end

    # Substitute a class teacher.
    # @param request 
    # @param site_id ID of the site from which to pull data.
    # @param version 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization A staff user authorization token.
    # @return [Array<(SubstituteClassTeacherResponse, Fixnum, Hash)>] SubstituteClassTeacherResponse data, response status code and response headers
    def class_substitute_class_teacher_with_http_info(request, site_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClassApi.class_substitute_class_teacher ...'
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling ClassApi.class_substitute_class_teacher"
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling ClassApi.class_substitute_class_teacher"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClassApi.class_substitute_class_teacher"
      end
      # resource path
      local_var_path = '/public/v{version}/class/substituteclassteacher'.sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      header_params[:'siteId'] = site_id
      header_params[:'authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubstituteClassTeacherResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClassApi#class_substitute_class_teacher\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
