=begin
#MINDBODY Public API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v6

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.6

=end

require 'date'

module SwaggerClient
  # A service that is on a client's account.
  class ClientService
    # The date that this pricing option became active and could be used to pay for services.
    attr_accessor :active_date

    # The number of service sessions this pricing option contained when first purchased.
    attr_accessor :count

    # When `true`, there are service sessions remaining on the pricing option that can be used pay for the current session.<br />  When `false`, the client cannot use this pricing option to pay for other services.
    attr_accessor :current

    # The date when the pricing option expires and can no longer be used to pay for services, even if unused service sessions remain on the option; expressed as UTC.
    attr_accessor :expiration_date

    # The unique ID assigned to this pricing option.
    attr_accessor :id

    # The name of this pricing option.
    attr_accessor :name

    # The date on which the client paid for this pricing option.
    attr_accessor :payment_date

    # Contains information about the service category this service falls under.
    attr_accessor :program

    # The number of service sessions remaining in the pricing option that can still be used.
    attr_accessor :remaining

    # The ID of the subscriber site associated with this pricing option.
    attr_accessor :site_id

    # The action taken.
    attr_accessor :action

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'active_date' => :'ActiveDate',
        :'count' => :'Count',
        :'current' => :'Current',
        :'expiration_date' => :'ExpirationDate',
        :'id' => :'Id',
        :'name' => :'Name',
        :'payment_date' => :'PaymentDate',
        :'program' => :'Program',
        :'remaining' => :'Remaining',
        :'site_id' => :'SiteId',
        :'action' => :'Action'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'active_date' => :'DateTime',
        :'count' => :'Integer',
        :'current' => :'BOOLEAN',
        :'expiration_date' => :'DateTime',
        :'id' => :'Integer',
        :'name' => :'String',
        :'payment_date' => :'DateTime',
        :'program' => :'Program',
        :'remaining' => :'Integer',
        :'site_id' => :'Integer',
        :'action' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'ActiveDate')
        self.active_date = attributes[:'ActiveDate']
      end

      if attributes.has_key?(:'Count')
        self.count = attributes[:'Count']
      end

      if attributes.has_key?(:'Current')
        self.current = attributes[:'Current']
      end

      if attributes.has_key?(:'ExpirationDate')
        self.expiration_date = attributes[:'ExpirationDate']
      end

      if attributes.has_key?(:'Id')
        self.id = attributes[:'Id']
      end

      if attributes.has_key?(:'Name')
        self.name = attributes[:'Name']
      end

      if attributes.has_key?(:'PaymentDate')
        self.payment_date = attributes[:'PaymentDate']
      end

      if attributes.has_key?(:'Program')
        self.program = attributes[:'Program']
      end

      if attributes.has_key?(:'Remaining')
        self.remaining = attributes[:'Remaining']
      end

      if attributes.has_key?(:'SiteId')
        self.site_id = attributes[:'SiteId']
      end

      if attributes.has_key?(:'Action')
        self.action = attributes[:'Action']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      action_validator = EnumAttributeValidator.new('String', ['None', 'Added', 'Updated', 'Failed', 'Removed'])
      return false unless action_validator.valid?(@action)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action Object to be assigned
    def action=(action)
      validator = EnumAttributeValidator.new('String', ['None', 'Added', 'Updated', 'Failed', 'Removed'])
      unless validator.valid?(action)
        fail ArgumentError, 'invalid value for "action", must be one of #{validator.allowable_values}.'
      end
      @action = action
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          active_date == o.active_date &&
          count == o.count &&
          current == o.current &&
          expiration_date == o.expiration_date &&
          id == o.id &&
          name == o.name &&
          payment_date == o.payment_date &&
          program == o.program &&
          remaining == o.remaining &&
          site_id == o.site_id &&
          action == o.action
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [active_date, count, current, expiration_date, id, name, payment_date, program, remaining, site_id, action].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
