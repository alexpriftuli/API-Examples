=begin
#MINDBODY Public API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v6

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.6

=end

require 'date'

module SwaggerClient
  # Contains information about an appointment.
  class Appointment
    # The preferred gender of the appointment provider.
    attr_accessor :gender_preference

    # The duration of the appointment.
    attr_accessor :duration

    # If a user has Complementary and Alternative Medicine features enabled, this property indicates the provider assigned to the appointment.
    attr_accessor :provider_id

    # The unique ID of the appointment.
    attr_accessor :id

    # The status of this appointment.
    attr_accessor :status

    # The date and time the appointment is to start.
    attr_accessor :start_date_time

    # The date and time the appointment is to end.
    attr_accessor :end_date_time

    # Any notes associated with the appointment.
    attr_accessor :notes

    # When `true`, indicates that the staff member was requested specifically by the client.
    attr_accessor :staff_requested

    # The ID of the program to which this appointment belongs.
    attr_accessor :program_id

    # The ID of the session type of this appointment.
    attr_accessor :session_type_id

    # The ID of the location where this appointment is to take place.
    attr_accessor :location_id

    # The ID of the staff member providing the service for this appointment.
    attr_accessor :staff_id

    # The RSSID of the client who is booked for this appointment.
    attr_accessor :client_id

    # When `true`, indicates that this is the client’s first appointment at this site.
    attr_accessor :first_appointment

    # The ID of the pass on the client’s account that is to pay for this appointment.
    attr_accessor :client_service_id

    # The resources this appointment is to use.
    attr_accessor :resources

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'gender_preference' => :'GenderPreference',
        :'duration' => :'Duration',
        :'provider_id' => :'ProviderId',
        :'id' => :'Id',
        :'status' => :'Status',
        :'start_date_time' => :'StartDateTime',
        :'end_date_time' => :'EndDateTime',
        :'notes' => :'Notes',
        :'staff_requested' => :'StaffRequested',
        :'program_id' => :'ProgramId',
        :'session_type_id' => :'SessionTypeId',
        :'location_id' => :'LocationId',
        :'staff_id' => :'StaffId',
        :'client_id' => :'ClientId',
        :'first_appointment' => :'FirstAppointment',
        :'client_service_id' => :'ClientServiceId',
        :'resources' => :'Resources'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'gender_preference' => :'String',
        :'duration' => :'Integer',
        :'provider_id' => :'String',
        :'id' => :'Integer',
        :'status' => :'String',
        :'start_date_time' => :'DateTime',
        :'end_date_time' => :'DateTime',
        :'notes' => :'String',
        :'staff_requested' => :'BOOLEAN',
        :'program_id' => :'Integer',
        :'session_type_id' => :'Integer',
        :'location_id' => :'Integer',
        :'staff_id' => :'Integer',
        :'client_id' => :'String',
        :'first_appointment' => :'BOOLEAN',
        :'client_service_id' => :'Integer',
        :'resources' => :'Array<Resource>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'GenderPreference')
        self.gender_preference = attributes[:'GenderPreference']
      end

      if attributes.has_key?(:'Duration')
        self.duration = attributes[:'Duration']
      end

      if attributes.has_key?(:'ProviderId')
        self.provider_id = attributes[:'ProviderId']
      end

      if attributes.has_key?(:'Id')
        self.id = attributes[:'Id']
      end

      if attributes.has_key?(:'Status')
        self.status = attributes[:'Status']
      end

      if attributes.has_key?(:'StartDateTime')
        self.start_date_time = attributes[:'StartDateTime']
      end

      if attributes.has_key?(:'EndDateTime')
        self.end_date_time = attributes[:'EndDateTime']
      end

      if attributes.has_key?(:'Notes')
        self.notes = attributes[:'Notes']
      end

      if attributes.has_key?(:'StaffRequested')
        self.staff_requested = attributes[:'StaffRequested']
      end

      if attributes.has_key?(:'ProgramId')
        self.program_id = attributes[:'ProgramId']
      end

      if attributes.has_key?(:'SessionTypeId')
        self.session_type_id = attributes[:'SessionTypeId']
      end

      if attributes.has_key?(:'LocationId')
        self.location_id = attributes[:'LocationId']
      end

      if attributes.has_key?(:'StaffId')
        self.staff_id = attributes[:'StaffId']
      end

      if attributes.has_key?(:'ClientId')
        self.client_id = attributes[:'ClientId']
      end

      if attributes.has_key?(:'FirstAppointment')
        self.first_appointment = attributes[:'FirstAppointment']
      end

      if attributes.has_key?(:'ClientServiceId')
        self.client_service_id = attributes[:'ClientServiceId']
      end

      if attributes.has_key?(:'Resources')
        if (value = attributes[:'Resources']).is_a?(Array)
          self.resources = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      gender_preference_validator = EnumAttributeValidator.new('String', ['None', 'Female', 'Male'])
      return false unless gender_preference_validator.valid?(@gender_preference)
      status_validator = EnumAttributeValidator.new('String', ['None', 'Requested', 'Booked', 'Completed', 'Confirmed', 'Arrived', 'NoShow', 'Cancelled', 'LateCancelled'])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gender_preference Object to be assigned
    def gender_preference=(gender_preference)
      validator = EnumAttributeValidator.new('String', ['None', 'Female', 'Male'])
      unless validator.valid?(gender_preference)
        fail ArgumentError, 'invalid value for "gender_preference", must be one of #{validator.allowable_values}.'
      end
      @gender_preference = gender_preference
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['None', 'Requested', 'Booked', 'Completed', 'Confirmed', 'Arrived', 'NoShow', 'Cancelled', 'LateCancelled'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          gender_preference == o.gender_preference &&
          duration == o.duration &&
          provider_id == o.provider_id &&
          id == o.id &&
          status == o.status &&
          start_date_time == o.start_date_time &&
          end_date_time == o.end_date_time &&
          notes == o.notes &&
          staff_requested == o.staff_requested &&
          program_id == o.program_id &&
          session_type_id == o.session_type_id &&
          location_id == o.location_id &&
          staff_id == o.staff_id &&
          client_id == o.client_id &&
          first_appointment == o.first_appointment &&
          client_service_id == o.client_service_id &&
          resources == o.resources
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [gender_preference, duration, provider_id, id, status, start_date_time, end_date_time, notes, staff_requested, program_id, session_type_id, location_id, staff_id, client_id, first_appointment, client_service_id, resources].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
