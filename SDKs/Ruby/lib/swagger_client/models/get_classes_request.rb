=begin
#MINDBODY Public API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v6

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.6

=end

require 'date'

module SwaggerClient
  class GetClassesRequest
    # The requested class description IDs.
    attr_accessor :class_description_ids

    # The requested class IDs.
    attr_accessor :class_ids

    # The requested IDs of the teaching staff members.
    attr_accessor :staff_ids

    # The requested start date for filtering.   <br />Default: **today’s date**
    attr_accessor :start_date_time

    # The requested end date for filtering.  <br />Default: **today’s date**
    attr_accessor :end_date_time

    # The client ID of the client who is viewing this class list. Based on identity, the client may be able to see additional information, such as membership specials.
    attr_accessor :client_id

    # A list of program IDs on which to base the search.
    attr_accessor :program_ids

    # A list of session type IDs on which to base the search.
    attr_accessor :session_type_ids

    # A list of location IDs on which to base the search.
    attr_accessor :location_ids

    # A list of semester IDs on which to base the search.
    attr_accessor :semester_ids

    # When `true`, canceled classes are removed from the response.<br />  When `false`, canceled classes are included in the response.<br />  Default: **false**
    attr_accessor :hide_canceled_classes

    # When `true`, classes outside scheduling window are removed from the response.<br />  When `false`, classes are included in the response, regardless of the scheduling window.<br />  Default: **false**
    attr_accessor :scheduling_window

    # When included in the request, only records modified on or after the `LastModifiedDate` specified are included in the response.
    attr_accessor :last_modified_date

    # Number of results to include, defaults to 100
    attr_accessor :limit

    # Page offset, defaults to 0.
    attr_accessor :offset

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'class_description_ids' => :'ClassDescriptionIds',
        :'class_ids' => :'ClassIds',
        :'staff_ids' => :'StaffIds',
        :'start_date_time' => :'StartDateTime',
        :'end_date_time' => :'EndDateTime',
        :'client_id' => :'ClientId',
        :'program_ids' => :'ProgramIds',
        :'session_type_ids' => :'SessionTypeIds',
        :'location_ids' => :'LocationIds',
        :'semester_ids' => :'SemesterIds',
        :'hide_canceled_classes' => :'HideCanceledClasses',
        :'scheduling_window' => :'SchedulingWindow',
        :'last_modified_date' => :'LastModifiedDate',
        :'limit' => :'Limit',
        :'offset' => :'Offset'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'class_description_ids' => :'Array<Integer>',
        :'class_ids' => :'Array<Integer>',
        :'staff_ids' => :'Array<Integer>',
        :'start_date_time' => :'DateTime',
        :'end_date_time' => :'DateTime',
        :'client_id' => :'String',
        :'program_ids' => :'Array<Integer>',
        :'session_type_ids' => :'Array<Integer>',
        :'location_ids' => :'Array<Integer>',
        :'semester_ids' => :'Array<Integer>',
        :'hide_canceled_classes' => :'BOOLEAN',
        :'scheduling_window' => :'BOOLEAN',
        :'last_modified_date' => :'DateTime',
        :'limit' => :'Integer',
        :'offset' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'ClassDescriptionIds')
        if (value = attributes[:'ClassDescriptionIds']).is_a?(Array)
          self.class_description_ids = value
        end
      end

      if attributes.has_key?(:'ClassIds')
        if (value = attributes[:'ClassIds']).is_a?(Array)
          self.class_ids = value
        end
      end

      if attributes.has_key?(:'StaffIds')
        if (value = attributes[:'StaffIds']).is_a?(Array)
          self.staff_ids = value
        end
      end

      if attributes.has_key?(:'StartDateTime')
        self.start_date_time = attributes[:'StartDateTime']
      end

      if attributes.has_key?(:'EndDateTime')
        self.end_date_time = attributes[:'EndDateTime']
      end

      if attributes.has_key?(:'ClientId')
        self.client_id = attributes[:'ClientId']
      end

      if attributes.has_key?(:'ProgramIds')
        if (value = attributes[:'ProgramIds']).is_a?(Array)
          self.program_ids = value
        end
      end

      if attributes.has_key?(:'SessionTypeIds')
        if (value = attributes[:'SessionTypeIds']).is_a?(Array)
          self.session_type_ids = value
        end
      end

      if attributes.has_key?(:'LocationIds')
        if (value = attributes[:'LocationIds']).is_a?(Array)
          self.location_ids = value
        end
      end

      if attributes.has_key?(:'SemesterIds')
        if (value = attributes[:'SemesterIds']).is_a?(Array)
          self.semester_ids = value
        end
      end

      if attributes.has_key?(:'HideCanceledClasses')
        self.hide_canceled_classes = attributes[:'HideCanceledClasses']
      end

      if attributes.has_key?(:'SchedulingWindow')
        self.scheduling_window = attributes[:'SchedulingWindow']
      end

      if attributes.has_key?(:'LastModifiedDate')
        self.last_modified_date = attributes[:'LastModifiedDate']
      end

      if attributes.has_key?(:'Limit')
        self.limit = attributes[:'Limit']
      end

      if attributes.has_key?(:'Offset')
        self.offset = attributes[:'Offset']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          class_description_ids == o.class_description_ids &&
          class_ids == o.class_ids &&
          staff_ids == o.staff_ids &&
          start_date_time == o.start_date_time &&
          end_date_time == o.end_date_time &&
          client_id == o.client_id &&
          program_ids == o.program_ids &&
          session_type_ids == o.session_type_ids &&
          location_ids == o.location_ids &&
          semester_ids == o.semester_ids &&
          hide_canceled_classes == o.hide_canceled_classes &&
          scheduling_window == o.scheduling_window &&
          last_modified_date == o.last_modified_date &&
          limit == o.limit &&
          offset == o.offset
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [class_description_ids, class_ids, staff_ids, start_date_time, end_date_time, client_id, program_ids, session_type_ids, location_ids, semester_ids, hide_canceled_classes, scheduling_window, last_modified_date, limit, offset].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
