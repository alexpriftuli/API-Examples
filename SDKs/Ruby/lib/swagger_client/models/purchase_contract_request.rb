=begin
#MINDBODY Public API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v6

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.6

=end

require 'date'

module SwaggerClient
  class PurchaseContractRequest
    # When `true`, the Public API validates input information, but does not commit it, so no client data is affected.<br />  When `false` or omitted, the transaction is committed, and client data is affected.<br />  Default: **false**
    attr_accessor :test

    # The ID of the location where the client is purchasing the contract; used for AutoPays.
    attr_accessor :location_id

    # The ID of the client. Note that this is not the same as the client’s unique ID.
    attr_accessor :client_id

    # The ID of the contract being purchased.
    attr_accessor :contract_id

    # The date that the contract starts.<br />  Default: **today’s date**
    attr_accessor :start_date

    # The date on which the first payment is to occur. Possible values:  * Instant  * `StartDate`
    attr_accessor :first_payment_occurs

    # A representation of the client’s signature. This value can take the form of Base64-encoded byte array. The file type should be PNG. The picture of the client’s signature is uploaded and viewable from the Client Documents page in the Core Business Mode software. The title of the document is:<br />  clientContractSignature-{uniquePurchasedClientContractID}-{contractName}-{contractStartDate}.{fileType}
    attr_accessor :client_signature

    # A promotion code, if one applies. Promotion codes are applied to items that are both marked as pay now in a contract and are discounted by the promotion code. If a pay now item is an autopay item, its autopay price is the price at the time of checkout, so, if a promotion code was applied, all autopays are scheduled using that discounted price.
    attr_accessor :promotion_code

    # Contains credit card payment information.<br />  Either `StoredCardInfo` or `CreditCardInfo` is required; the other becomes optional.
    attr_accessor :credit_card_info

    # Contains information about the stored credit card payment.<br />  Either `CreditCardInfo` or `StoredCardInfo` is required; the other becomes optional.
    attr_accessor :stored_card_info

    # When `true`, indicates that email and SMS notifications should be sent to the client after purchase.<br />  Default: **true**
    attr_accessor :send_notifications

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'test' => :'Test',
        :'location_id' => :'LocationId',
        :'client_id' => :'ClientId',
        :'contract_id' => :'ContractId',
        :'start_date' => :'StartDate',
        :'first_payment_occurs' => :'FirstPaymentOccurs',
        :'client_signature' => :'ClientSignature',
        :'promotion_code' => :'PromotionCode',
        :'credit_card_info' => :'CreditCardInfo',
        :'stored_card_info' => :'StoredCardInfo',
        :'send_notifications' => :'SendNotifications'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'test' => :'BOOLEAN',
        :'location_id' => :'Integer',
        :'client_id' => :'String',
        :'contract_id' => :'Integer',
        :'start_date' => :'DateTime',
        :'first_payment_occurs' => :'String',
        :'client_signature' => :'String',
        :'promotion_code' => :'String',
        :'credit_card_info' => :'CreditCardInfo',
        :'stored_card_info' => :'StoredCardInfo',
        :'send_notifications' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'Test')
        self.test = attributes[:'Test']
      end

      if attributes.has_key?(:'LocationId')
        self.location_id = attributes[:'LocationId']
      end

      if attributes.has_key?(:'ClientId')
        self.client_id = attributes[:'ClientId']
      end

      if attributes.has_key?(:'ContractId')
        self.contract_id = attributes[:'ContractId']
      end

      if attributes.has_key?(:'StartDate')
        self.start_date = attributes[:'StartDate']
      end

      if attributes.has_key?(:'FirstPaymentOccurs')
        self.first_payment_occurs = attributes[:'FirstPaymentOccurs']
      end

      if attributes.has_key?(:'ClientSignature')
        self.client_signature = attributes[:'ClientSignature']
      end

      if attributes.has_key?(:'PromotionCode')
        self.promotion_code = attributes[:'PromotionCode']
      end

      if attributes.has_key?(:'CreditCardInfo')
        self.credit_card_info = attributes[:'CreditCardInfo']
      end

      if attributes.has_key?(:'StoredCardInfo')
        self.stored_card_info = attributes[:'StoredCardInfo']
      end

      if attributes.has_key?(:'SendNotifications')
        self.send_notifications = attributes[:'SendNotifications']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @client_id.nil?
        invalid_properties.push('invalid value for "client_id", client_id cannot be nil.')
      end

      if @contract_id.nil?
        invalid_properties.push('invalid value for "contract_id", contract_id cannot be nil.')
      end

      if !@client_signature.nil? && @client_signature !~ Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
        invalid_properties.push('invalid value for "client_signature", must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @client_id.nil?
      return false if @contract_id.nil?
      return false if !@client_signature.nil? && @client_signature !~ Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] client_signature Value to be assigned
    def client_signature=(client_signature)
      if !client_signature.nil? && client_signature !~ Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
        fail ArgumentError, 'invalid value for "client_signature", must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.'
      end

      @client_signature = client_signature
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          test == o.test &&
          location_id == o.location_id &&
          client_id == o.client_id &&
          contract_id == o.contract_id &&
          start_date == o.start_date &&
          first_payment_occurs == o.first_payment_occurs &&
          client_signature == o.client_signature &&
          promotion_code == o.promotion_code &&
          credit_card_info == o.credit_card_info &&
          stored_card_info == o.stored_card_info &&
          send_notifications == o.send_notifications
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [test, location_id, client_id, contract_id, start_date, first_payment_occurs, client_signature, promotion_code, credit_card_info, stored_card_info, send_notifications].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
