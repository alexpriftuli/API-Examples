=begin
#MINDBODY Public API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v6

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.6

=end

require 'date'

module SwaggerClient
  class AddContactLogRequest
    # The ID of the client whose contact log is being added.
    attr_accessor :client_id

    # The ID of the staff member to whom the contact log is assigned.
    attr_accessor :assigned_to_staff_id

    # The body of the contact log.
    attr_accessor :text

    # The date by which the assigned staff member should complete this contact log.
    attr_accessor :followup_by_date

    # How the client wants to be contacted.
    attr_accessor :contact_method

    # The name of the person to be contacted by the assigned staff member.
    attr_accessor :contact_name

    # Any comments on the contact log.
    attr_accessor :comments

    # The contact log types used to tag this contact log.
    attr_accessor :types

    # When `true`, indicates that this is a test request and no data is inserted into the subscriberâ€™s database.<br />  When `false`, the database is updated.
    attr_accessor :test

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'client_id' => :'ClientId',
        :'assigned_to_staff_id' => :'AssignedToStaffId',
        :'text' => :'Text',
        :'followup_by_date' => :'FollowupByDate',
        :'contact_method' => :'ContactMethod',
        :'contact_name' => :'ContactName',
        :'comments' => :'Comments',
        :'types' => :'Types',
        :'test' => :'Test'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'client_id' => :'String',
        :'assigned_to_staff_id' => :'Integer',
        :'text' => :'String',
        :'followup_by_date' => :'DateTime',
        :'contact_method' => :'String',
        :'contact_name' => :'String',
        :'comments' => :'Array<String>',
        :'types' => :'Array<AddContactLogType>',
        :'test' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'ClientId')
        self.client_id = attributes[:'ClientId']
      end

      if attributes.has_key?(:'AssignedToStaffId')
        self.assigned_to_staff_id = attributes[:'AssignedToStaffId']
      end

      if attributes.has_key?(:'Text')
        self.text = attributes[:'Text']
      end

      if attributes.has_key?(:'FollowupByDate')
        self.followup_by_date = attributes[:'FollowupByDate']
      end

      if attributes.has_key?(:'ContactMethod')
        self.contact_method = attributes[:'ContactMethod']
      end

      if attributes.has_key?(:'ContactName')
        self.contact_name = attributes[:'ContactName']
      end

      if attributes.has_key?(:'Comments')
        if (value = attributes[:'Comments']).is_a?(Array)
          self.comments = value
        end
      end

      if attributes.has_key?(:'Types')
        if (value = attributes[:'Types']).is_a?(Array)
          self.types = value
        end
      end

      if attributes.has_key?(:'Test')
        self.test = attributes[:'Test']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @client_id.nil?
        invalid_properties.push('invalid value for "client_id", client_id cannot be nil.')
      end

      if @contact_method.nil?
        invalid_properties.push('invalid value for "contact_method", contact_method cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @client_id.nil?
      return false if @contact_method.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          client_id == o.client_id &&
          assigned_to_staff_id == o.assigned_to_staff_id &&
          text == o.text &&
          followup_by_date == o.followup_by_date &&
          contact_method == o.contact_method &&
          contact_name == o.contact_name &&
          comments == o.comments &&
          types == o.types &&
          test == o.test
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [client_id, assigned_to_staff_id, text, followup_by_date, contact_method, contact_name, comments, types, test].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
