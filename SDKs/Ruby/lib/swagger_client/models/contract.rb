=begin
#MINDBODY Public API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v6

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.6

=end

require 'date'

module SwaggerClient
  class Contract
    # The contract’s ID at the subscriber’s business.
    attr_accessor :id

    # The name of the contract.
    attr_accessor :name

    # A description of the contract.
    attr_accessor :description

    # The ID of the membership that was assigned to the client when the client signed up for a contract.
    attr_accessor :assigns_membership_id

    # The name of the membership that was assigned to the client when the client signed up for this contract.
    attr_accessor :assigns_membership_name

    # When `true`, indicates that this membership is intended to be shown to clients in client experiences.<br />  When `false`, this contract should only be shown to staff members.
    attr_accessor :sold_online

    # Contains information about the items in the contract.
    attr_accessor :contract_items

    # Defines whether this contract is treated as an introductory offer. If this is an introductory offer, then clients are always charged a set number of times rather than month to month, using their AutoPays. Possible values are:  * None  * NewConsumer  * NewAndReturningConsumer
    attr_accessor :intro_offer

    # Contains information about the AutoPay schedule. This parameter is null if `AutopayTriggerType` has a value of `PricingOptionRunsOutOrExpires`.
    attr_accessor :autopay_schedule

    # The number of times that the AutoPay is to be run. This value is null if `FrequencyType` is `MonthToMonth`.
    attr_accessor :number_of_autopays

    # Defines whether the AutoPay, if applicable to this contract, runs on a set schedule or when the pricing option runs out or expires. Possible values are:  * OnSetSchedule  * PricingOptionRunsOutOrExpires
    attr_accessor :autopay_trigger_type

    # The renewal action to be taken when this AutoPay is completed. Possible values are:  * ContractExpires  * ContractAutomaticallyRenews
    attr_accessor :action_upon_completion_of_autopays

    # The value that indicates when clients are charged. Possible values are:  * OnSaleDate  * FirstOfTheMonth  * FifteenthOfTheMonth  * LastDayOfTheMonth  * FirstOrFifteenthOfTheMonth  * FirstOrSixteenthOfTheMonth  * FifteenthOrEndOfTheMonth  * SpecificDate
    attr_accessor :clients_charged_on

    # If `ClientsChargedOn` is defined as a specific date, this property holds the value of that date. Otherwise, this property is null.
    attr_accessor :clients_charged_on_specific_date

    # The calculated discount applied to the items in this contract.
    attr_accessor :discount_amount

    # The amount of the deposit required for this contract.
    attr_accessor :deposit_amount

    # When `true`, indicates that the first payment for the AutoPay is free.
    attr_accessor :first_autopay_free

    # When `true`, indicates that the last payment for the AutoPay is free.
    attr_accessor :last_autopay_free

    # When `true`, indicates that the client can terminate this contract on the Internet.
    attr_accessor :client_terminate_online

    # Contains information about the memberships that can purchase this contract. If null, then no membership restrictions exist, and anyone can purchase the contract.
    attr_accessor :membership_type_restrictions

    # The IDs of the locations where this contract may be sold. If there are no restrictions, this value is null.
    attr_accessor :location_purchase_restriction_ids

    # Location names where the contract may be purchased. If this value is null, there are no restrictions.
    attr_accessor :location_purchase_restriction_names

    # Business-defined terms and conditions for the contract.
    attr_accessor :agreement_terms

    # When `true`, clients who purchase the contract are prompted to agree to the terms of the contract the next time that they log in.
    attr_accessor :requires_electronic_confirmation

    # When `true`, this contract establishes an AutoPay on the client’s account.
    attr_accessor :autopay_enabled

    # The subtotal of the amount that the client is to be charged when signing up for the contract.
    attr_accessor :first_payment_amount_subtotal

    # The amount of tax that the client is to be charged when signing up for the contract.
    attr_accessor :first_payment_amount_tax

    # The total amount that the client is to be charged when signing up for the contract.
    attr_accessor :first_payment_amount_total

    # The subtotal amount that the client is to be charged on an ongoing basis.
    attr_accessor :recurring_payment_amount_subtotal

    # The amount of tax the client is to be charged on an ongoing basis.
    attr_accessor :recurring_payment_amount_tax

    # The total amount that the client is to be charged on an ongoing basis.
    attr_accessor :recurring_payment_amount_total

    # The subtotal amount that the client is to be charged over the lifespan of the contract.
    attr_accessor :total_contract_amount_subtotal

    # The total amount of tax the client is to be charged over the lifespan of the contract.
    attr_accessor :total_contract_amount_tax

    # The total amount the client is to be charged over the lifespan of the contract.
    attr_accessor :total_contract_amount_total

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'Id',
        :'name' => :'Name',
        :'description' => :'Description',
        :'assigns_membership_id' => :'AssignsMembershipId',
        :'assigns_membership_name' => :'AssignsMembershipName',
        :'sold_online' => :'SoldOnline',
        :'contract_items' => :'ContractItems',
        :'intro_offer' => :'IntroOffer',
        :'autopay_schedule' => :'AutopaySchedule',
        :'number_of_autopays' => :'NumberOfAutopays',
        :'autopay_trigger_type' => :'AutopayTriggerType',
        :'action_upon_completion_of_autopays' => :'ActionUponCompletionOfAutopays',
        :'clients_charged_on' => :'ClientsChargedOn',
        :'clients_charged_on_specific_date' => :'ClientsChargedOnSpecificDate',
        :'discount_amount' => :'DiscountAmount',
        :'deposit_amount' => :'DepositAmount',
        :'first_autopay_free' => :'FirstAutopayFree',
        :'last_autopay_free' => :'LastAutopayFree',
        :'client_terminate_online' => :'ClientTerminateOnline',
        :'membership_type_restrictions' => :'MembershipTypeRestrictions',
        :'location_purchase_restriction_ids' => :'LocationPurchaseRestrictionIds',
        :'location_purchase_restriction_names' => :'LocationPurchaseRestrictionNames',
        :'agreement_terms' => :'AgreementTerms',
        :'requires_electronic_confirmation' => :'RequiresElectronicConfirmation',
        :'autopay_enabled' => :'AutopayEnabled',
        :'first_payment_amount_subtotal' => :'FirstPaymentAmountSubtotal',
        :'first_payment_amount_tax' => :'FirstPaymentAmountTax',
        :'first_payment_amount_total' => :'FirstPaymentAmountTotal',
        :'recurring_payment_amount_subtotal' => :'RecurringPaymentAmountSubtotal',
        :'recurring_payment_amount_tax' => :'RecurringPaymentAmountTax',
        :'recurring_payment_amount_total' => :'RecurringPaymentAmountTotal',
        :'total_contract_amount_subtotal' => :'TotalContractAmountSubtotal',
        :'total_contract_amount_tax' => :'TotalContractAmountTax',
        :'total_contract_amount_total' => :'TotalContractAmountTotal'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'name' => :'String',
        :'description' => :'String',
        :'assigns_membership_id' => :'Integer',
        :'assigns_membership_name' => :'String',
        :'sold_online' => :'BOOLEAN',
        :'contract_items' => :'Array<ContractItem>',
        :'intro_offer' => :'String',
        :'autopay_schedule' => :'AutopaySchedule',
        :'number_of_autopays' => :'Integer',
        :'autopay_trigger_type' => :'String',
        :'action_upon_completion_of_autopays' => :'String',
        :'clients_charged_on' => :'String',
        :'clients_charged_on_specific_date' => :'DateTime',
        :'discount_amount' => :'Float',
        :'deposit_amount' => :'Float',
        :'first_autopay_free' => :'BOOLEAN',
        :'last_autopay_free' => :'BOOLEAN',
        :'client_terminate_online' => :'BOOLEAN',
        :'membership_type_restrictions' => :'Array<MembershipTypeRestriction>',
        :'location_purchase_restriction_ids' => :'Array<Integer>',
        :'location_purchase_restriction_names' => :'Array<String>',
        :'agreement_terms' => :'String',
        :'requires_electronic_confirmation' => :'BOOLEAN',
        :'autopay_enabled' => :'BOOLEAN',
        :'first_payment_amount_subtotal' => :'Float',
        :'first_payment_amount_tax' => :'Float',
        :'first_payment_amount_total' => :'Float',
        :'recurring_payment_amount_subtotal' => :'Float',
        :'recurring_payment_amount_tax' => :'Float',
        :'recurring_payment_amount_total' => :'Float',
        :'total_contract_amount_subtotal' => :'Float',
        :'total_contract_amount_tax' => :'Float',
        :'total_contract_amount_total' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'Id')
        self.id = attributes[:'Id']
      end

      if attributes.has_key?(:'Name')
        self.name = attributes[:'Name']
      end

      if attributes.has_key?(:'Description')
        self.description = attributes[:'Description']
      end

      if attributes.has_key?(:'AssignsMembershipId')
        self.assigns_membership_id = attributes[:'AssignsMembershipId']
      end

      if attributes.has_key?(:'AssignsMembershipName')
        self.assigns_membership_name = attributes[:'AssignsMembershipName']
      end

      if attributes.has_key?(:'SoldOnline')
        self.sold_online = attributes[:'SoldOnline']
      end

      if attributes.has_key?(:'ContractItems')
        if (value = attributes[:'ContractItems']).is_a?(Array)
          self.contract_items = value
        end
      end

      if attributes.has_key?(:'IntroOffer')
        self.intro_offer = attributes[:'IntroOffer']
      end

      if attributes.has_key?(:'AutopaySchedule')
        self.autopay_schedule = attributes[:'AutopaySchedule']
      end

      if attributes.has_key?(:'NumberOfAutopays')
        self.number_of_autopays = attributes[:'NumberOfAutopays']
      end

      if attributes.has_key?(:'AutopayTriggerType')
        self.autopay_trigger_type = attributes[:'AutopayTriggerType']
      end

      if attributes.has_key?(:'ActionUponCompletionOfAutopays')
        self.action_upon_completion_of_autopays = attributes[:'ActionUponCompletionOfAutopays']
      end

      if attributes.has_key?(:'ClientsChargedOn')
        self.clients_charged_on = attributes[:'ClientsChargedOn']
      end

      if attributes.has_key?(:'ClientsChargedOnSpecificDate')
        self.clients_charged_on_specific_date = attributes[:'ClientsChargedOnSpecificDate']
      end

      if attributes.has_key?(:'DiscountAmount')
        self.discount_amount = attributes[:'DiscountAmount']
      end

      if attributes.has_key?(:'DepositAmount')
        self.deposit_amount = attributes[:'DepositAmount']
      end

      if attributes.has_key?(:'FirstAutopayFree')
        self.first_autopay_free = attributes[:'FirstAutopayFree']
      end

      if attributes.has_key?(:'LastAutopayFree')
        self.last_autopay_free = attributes[:'LastAutopayFree']
      end

      if attributes.has_key?(:'ClientTerminateOnline')
        self.client_terminate_online = attributes[:'ClientTerminateOnline']
      end

      if attributes.has_key?(:'MembershipTypeRestrictions')
        if (value = attributes[:'MembershipTypeRestrictions']).is_a?(Array)
          self.membership_type_restrictions = value
        end
      end

      if attributes.has_key?(:'LocationPurchaseRestrictionIds')
        if (value = attributes[:'LocationPurchaseRestrictionIds']).is_a?(Array)
          self.location_purchase_restriction_ids = value
        end
      end

      if attributes.has_key?(:'LocationPurchaseRestrictionNames')
        if (value = attributes[:'LocationPurchaseRestrictionNames']).is_a?(Array)
          self.location_purchase_restriction_names = value
        end
      end

      if attributes.has_key?(:'AgreementTerms')
        self.agreement_terms = attributes[:'AgreementTerms']
      end

      if attributes.has_key?(:'RequiresElectronicConfirmation')
        self.requires_electronic_confirmation = attributes[:'RequiresElectronicConfirmation']
      end

      if attributes.has_key?(:'AutopayEnabled')
        self.autopay_enabled = attributes[:'AutopayEnabled']
      end

      if attributes.has_key?(:'FirstPaymentAmountSubtotal')
        self.first_payment_amount_subtotal = attributes[:'FirstPaymentAmountSubtotal']
      end

      if attributes.has_key?(:'FirstPaymentAmountTax')
        self.first_payment_amount_tax = attributes[:'FirstPaymentAmountTax']
      end

      if attributes.has_key?(:'FirstPaymentAmountTotal')
        self.first_payment_amount_total = attributes[:'FirstPaymentAmountTotal']
      end

      if attributes.has_key?(:'RecurringPaymentAmountSubtotal')
        self.recurring_payment_amount_subtotal = attributes[:'RecurringPaymentAmountSubtotal']
      end

      if attributes.has_key?(:'RecurringPaymentAmountTax')
        self.recurring_payment_amount_tax = attributes[:'RecurringPaymentAmountTax']
      end

      if attributes.has_key?(:'RecurringPaymentAmountTotal')
        self.recurring_payment_amount_total = attributes[:'RecurringPaymentAmountTotal']
      end

      if attributes.has_key?(:'TotalContractAmountSubtotal')
        self.total_contract_amount_subtotal = attributes[:'TotalContractAmountSubtotal']
      end

      if attributes.has_key?(:'TotalContractAmountTax')
        self.total_contract_amount_tax = attributes[:'TotalContractAmountTax']
      end

      if attributes.has_key?(:'TotalContractAmountTotal')
        self.total_contract_amount_total = attributes[:'TotalContractAmountTotal']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          description == o.description &&
          assigns_membership_id == o.assigns_membership_id &&
          assigns_membership_name == o.assigns_membership_name &&
          sold_online == o.sold_online &&
          contract_items == o.contract_items &&
          intro_offer == o.intro_offer &&
          autopay_schedule == o.autopay_schedule &&
          number_of_autopays == o.number_of_autopays &&
          autopay_trigger_type == o.autopay_trigger_type &&
          action_upon_completion_of_autopays == o.action_upon_completion_of_autopays &&
          clients_charged_on == o.clients_charged_on &&
          clients_charged_on_specific_date == o.clients_charged_on_specific_date &&
          discount_amount == o.discount_amount &&
          deposit_amount == o.deposit_amount &&
          first_autopay_free == o.first_autopay_free &&
          last_autopay_free == o.last_autopay_free &&
          client_terminate_online == o.client_terminate_online &&
          membership_type_restrictions == o.membership_type_restrictions &&
          location_purchase_restriction_ids == o.location_purchase_restriction_ids &&
          location_purchase_restriction_names == o.location_purchase_restriction_names &&
          agreement_terms == o.agreement_terms &&
          requires_electronic_confirmation == o.requires_electronic_confirmation &&
          autopay_enabled == o.autopay_enabled &&
          first_payment_amount_subtotal == o.first_payment_amount_subtotal &&
          first_payment_amount_tax == o.first_payment_amount_tax &&
          first_payment_amount_total == o.first_payment_amount_total &&
          recurring_payment_amount_subtotal == o.recurring_payment_amount_subtotal &&
          recurring_payment_amount_tax == o.recurring_payment_amount_tax &&
          recurring_payment_amount_total == o.recurring_payment_amount_total &&
          total_contract_amount_subtotal == o.total_contract_amount_subtotal &&
          total_contract_amount_tax == o.total_contract_amount_tax &&
          total_contract_amount_total == o.total_contract_amount_total
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, description, assigns_membership_id, assigns_membership_name, sold_online, contract_items, intro_offer, autopay_schedule, number_of_autopays, autopay_trigger_type, action_upon_completion_of_autopays, clients_charged_on, clients_charged_on_specific_date, discount_amount, deposit_amount, first_autopay_free, last_autopay_free, client_terminate_online, membership_type_restrictions, location_purchase_restriction_ids, location_purchase_restriction_names, agreement_terms, requires_electronic_confirmation, autopay_enabled, first_payment_amount_subtotal, first_payment_amount_tax, first_payment_amount_total, recurring_payment_amount_subtotal, recurring_payment_amount_tax, recurring_payment_amount_total, total_contract_amount_subtotal, total_contract_amount_tax, total_contract_amount_total].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
